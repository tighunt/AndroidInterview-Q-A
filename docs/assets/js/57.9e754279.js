(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{181:function(t,n,e){"use strict";e.r(n);var i=e(0),a=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("h4",{attrs:{id:"抽象类接口区别-360"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象类接口区别-360","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽象类接口区别-360")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("默认的方法实现\n抽象类可以有默认的方法实现完全是抽象的。接口可以使用default关键字实现默认方法而不要求其子类进行实现")])]),t._v(" "),e("li",[e("p",[t._v("实现\n子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。\t\n子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现")])]),t._v(" "),e("li",[e("p",[t._v("构造器\t\n抽象类可以有构造器\t\n接口不能有构造器")])]),t._v(" "),e("li",[e("p",[t._v("与正常Java类的区别\t\n除了你不能实例化抽象类之外，它和普通Java类没有任何区\n接口是完全不同的类型")])]),t._v(" "),e("li",[e("p",[t._v("访问修饰符\t\n抽象方法可以有public、protected和default这些修饰符\n接口方法默认修饰符是public。你不可以使用其它修饰符。")])]),t._v(" "),e("li",[e("p",[t._v("main方法\t\n抽象方法可以有main方法并且我们可以运行它\t\n接口没有main方法，因此我们不能运行它。")])]),t._v(" "),e("li",[e("p",[t._v("多继承\t\n抽象类在java语言中所表示的是一种继承关系，一个子类只能存在一个父类，但是可以存在多个接口。")])]),t._v(" "),e("li",[e("p",[t._v("速度\t\n它比接口速度要快\t\n接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。")])]),t._v(" "),e("li",[e("p",[t._v("添加新方法\t\n如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。\t\n如果你往接口中添加方法，那么你必须改变实现该接口的类。")])])])])}],!1,null,null,null);a.options.__file="抽象类接口区别-360.md";n.default=a.exports}}]);