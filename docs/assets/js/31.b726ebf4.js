(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{167:function(v,t,_){"use strict";_.r(t);var a=_(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("div",{staticClass:"content"},[_("h4",{attrs:{id:"java多态-乐视"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java多态-乐视","aria-hidden":"true"}},[v._v("#")]),v._v(" java多态-乐视")]),v._v(" "),_("p",[v._v("Java多态性理解")]),v._v(" "),_("p",[v._v("Java中多态性的实现")]),v._v(" "),_("p",[v._v("什么是多态")]),v._v(" "),_("p",[v._v("面向对象的三大特性：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。")]),v._v(" "),_("p",[v._v("多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）")]),v._v(" "),_("p",[v._v("实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实\n际类型，根据其实际的类型调用其相应的方法。")]),v._v(" "),_("p",[v._v("多态的作用：消除类型之间的耦合关系。")]),v._v(" "),_("p",[v._v("现实中，关于多态的例子不胜枚举。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。\n下面是多态存在的三个必要条件，要求大家做梦时都能背出来！")]),v._v(" "),_("p",[v._v("多态存在的三个必要条件\n一、要有继承；\n二、要有重写；\n三、父类引用指向子类对象。")]),v._v(" "),_("p",[v._v("多态的好处：")]),v._v(" "),_("p",[v._v("1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。")]),v._v(" "),_("p",[v._v("2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。")]),v._v(" "),_("p",[v._v("3.接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。")]),v._v(" "),_("p",[v._v("4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。")]),v._v(" "),_("p",[v._v("5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。")]),v._v(" "),_("p",[v._v("Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载。")])])}],!1,null,null,null);i.options.__file="java多态-乐视.md";t.default=i.exports}}]);